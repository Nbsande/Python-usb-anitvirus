import os
import hashlib
import time
from sys import exit
dirName=os.path.dirname(os.path.realpath(__file__))
yesAnswers=['yes','Yes','YES','Y','y','']
noAnswers=['No','no','n','N','NO']
ENILfilePath=''
charList="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_-"
cipherSource="abCDlmnfcdJeistuxyzvXUVWjkBghGYoEFp#qrw^12_H8-9(05)3K*LIMQT46%7RS&$NOP@!AZ"

def getListOfFiles(top):
    # create a list of file and sub directories 
    # names in the given directory
    cwd=os.getcwd()
    result = [os.path.join(cwd,os.path.join(dp, f)) 
        for dp, dn, filenames in os.walk(top,topdown=False) 
        for f in filenames 
        if os.path.splitext(f)[1] != '.enil'] 
    return result
 

def encryptString(unencryptedString):
    #takes any string and converts it into an encrypted string based on cipherSource
    strLen=len(unencryptedString)
    #np array not used bcz cant change it back to string 
    result=""
    for i in range(strLen):
        index=charList.find(unencryptedString[i])
        if index==-1:
            result+=unencryptedString[i]
        else:
            result+=cipherSource[index]
    return result


def encryptList(unencryptedList):
    #Takes a list of strings and returns a comma separated string of encrypted strings from the list
       return ",".join([encryptString(x) for x in unencryptedList]) 

def decryptString(CSVstring):
    #same as encrypter string but decrypts
    encryptedStrings=CSVstring.split(",")
    result=[]
    for string in encryptedStrings:
        unencryptedString=""
        for i in range(len(string)):
            index=cipherSource.find(string[i])
            if index==-1:
                unencryptedString+=string[i]
            else:
                unencryptedString+=charList[index]
        result.append(unencryptedString)
    return ",".join(result)

def decryptList(encryptedList):
    #same as encryptList but decrypts
    outputString=''
    result=[decryptString(x) for x in encryptedList]
    return ",".join(result)


def dictcreator(allFiles):
    #creates a dictionary of filePath:hash for each file and its hash and adds a hash at the end which is obtained from hashing the string obtained from concatenatnig all file hashes. I call this hash the master Hash.
    hashesDict={}
    masterHasher = hashlib.sha256()
    for filename in allFiles:
        fileHasher = hashlib.sha256()
        with open(filename,"rb") as f:
             # Read and update hash string value in blocks of 4K
            for byte_block in iter(lambda: f.read(4096),b""):
                fileHasher.update(byte_block)
                masterHasher.update(byte_block)
            hashesDict[filename]=fileHasher.hexdigest()
            
    return(hashesDict,masterHasher.hexdigest())
    #returns (files,hashes,masterHash) all of which are strings

def storeCreator(hashesDict, masterHash):
    #creating the text for the enil store
    tempFiles=list(hashesDict.keys())
    
    tempHashes=list(hashesDict.values()) 
    #preparing the CSV string of files in a ciphered way
    files=encryptList(tempFiles)
    files=files+"\n"
    #preparing CSV string of hashes in a ciphered way
    hashes=encryptList(tempHashes)
    hashes=hashes+"\n"
    #preparing masterHash in a ciphered way
    masterHash=encryptString(masterHash)
    
    return(files,hashes,masterHash)

def noENILfile():
    #should run when there is no ENIL store.
    #creates an ENIL store with the foll encyrpted entries:1)all file paths,2)all hashes of files,3)masterhash
    allFiles=getListOfFiles(dirName)
    hashesDict,masterHash=dictcreator(allFiles)
    files,hashes,masterHash=storeCreator(hashesDict,masterHash)
    
    print("Hash checker 'ENIL' file did not exist previously so one will be created")
    with open("hashstore.enil","w") as f:
        f.write(files)
        f.write(hashes)
        f.write(masterHash)
        f.close()
    time.sleep(2)
    exit()

def ENILfileFound():
    #should run when an ENIL store is found
    #reads the ENIL store and decrypts and returns files,hashes and masterHash
    with open('hashstore.enil','r') as f:
        files,hashes,masterHash =[x.strip() for x in f.readlines()]
    files=str(decryptString(files))
    files=files.split(',')
    hashes=str(decryptString(hashes))
    hashes=hashes.split(',')
    masterHash=decryptString(masterHash)
    hashesDictFromENIL={}
    if len(files)==len(hashes):    
        for n in range(len(files)):
            hashesDictFromENIL[files[n]]=hashes[n]
    else:
        print("ENIL store has been tampered with")
        print("If you did not modify the ENIL store, consider this device infected.")
        print("ENIL store must be updated you wish to check for modifications in this folder in the future")
        exit()
    
    return(hashesDictFromENIL,masterHash)

def ENILfileUpdate():
    #should run only after checking with the user
    #over writes previous ENIL store with updates values
    print('\nNote: Only update the cache if you are confident that integrity of all files are intact.')
    time.sleep(4)
    updateConfirmation=input('Would you like to update the cache of file integrity keys?(Y/n)')            
    if updateConfirmation in yesAnswers:
        print('Virus check will close soon after updating')
        # Main update logic
        filenames=getListOfFiles(dirName)
        hashesDict,masterHash=dictcreator(filenames)
        filenamesString,hashesString,masterHashString=storeCreator(hashesDict,masterHash)
        with open("hashstore.enil","w") as f:
            f.write(filenamesString)
            f.write(hashesString)
            f.write(masterHashString)
            f.close()
        time.sleep(2)
        print("Hash checker 'ENIL' file has been updated")


  
def checkForDeletions(CurrentFiles,CacheFiles):
    #chceks the 2 files list to see if any file from old list was deleted ie not there in current list
    return [x for x in CacheFiles if x not in CurrentFiles] #deleted files list

def checkForAdditions(CurrentFiles,CacheFiles):
    #checks to see if any file was added ie file was not there in old list but is there in new list
    return [x for x in CurrentFiles if x not in CacheFiles] #added files list

def deleteFiles(addedFiles):
    #allows user to manually delete files he/she hasnt added or modified directly through command line
    filePath=input('File path: ')
    if filePath=="":
        return
    if filePath in addedFiles:
        os.remove(filePath)
        # anotherOne=input('Would you like to delete another file?(Y/n)')
        # if anotherOne in yesAnswers:
        deleteFiles(addedFiles)
            # return
    else:
        print(filePath+' isnt a file path that was recently added. ',end="")
        time.sleep(4)
        retryResponse=input('Would you like to try again?(Y/n)')
        if retryResponse in yesAnswers:
            deleteFiles(addedFiles)


def UserCheckModified(modifiedFiles):
    #allows user to go through each modifiedFile to see if theres a file that they didnt modify
    confirmation=input('\nWere some of the above listed files not modified by you?\nWould you like to remove one or more of these files?(Y/n)\n')
    if confirmation in yesAnswers:
        print('Here is the list of the modified files for your convenience:')
        for file in modifiedFiles:
            print("  "+file)
            time.sleep(1)
        print("\nTo stop deleting files simply enter a blank path")
        print("Copy the path of the file you want to delete from the list above here:")
        deleteFiles(modifiedFiles)

def ModifyCheck(hashesDictFromENIL,masterHashFromENIL):
    allFiles=getListOfFiles(dirName)
    hashesDict,masterHash=dictcreator(allFiles)
    #check that masterHash is same
    if masterHash==masterHashFromENIL:
        print('Files have not been modified.')
        time.sleep(1)
        print('Integrity of all files is maintained. Virus checker will now close')
        time.sleep(4)
        #exits program
        exit()        
    else:
        CurrentFiles=list(hashesDict.keys())
        CacheFiles=list(hashesDictFromENIL.keys())
        #check for file additions and deletions
        addedFiles=checkForAdditions(CurrentFiles,CacheFiles)
        deletedFiles=checkForDeletions(CurrentFiles,CacheFiles)
        if len(addedFiles)==0 and len(deletedFiles)==0:
            print("No files have been added or deleted")
            time.sleep(3)
        else:
            if len(deletedFiles)!=0:
                print("The following files have been deleted:")
                time.sleep(1)
                for file in deletedFiles:
                    print("  "+file)
                    time.sleep(0.5)
                garbage=input('press enter to continue')            
            if len(addedFiles)!=0:
                print("\nThe following files have been added:")
                time.sleep(1)
                for file in addedFiles:
                    print("  "+file)
                    time.sleep(0.5)
                garbage=input('press enter to continue')
            
        #check the hashes
        #only need to check hash of files that are currently in folders
        verified=[]
        modified=[]

        print('\nVerifying integrity of old files ...')
        
        for file in CurrentFiles:
            if file  not in addedFiles:
                if hashesDict[file]==hashesDictFromENIL[file]:
                    verified.append(file)
                    continue
                else:
                    modified.append(file)
        lsFiles=input("List files that have not been modified?(Y/n) ")
        if(lsFiles in yesAnswers):
            print('\nFollowing files have not been modified and their integrity is guranteed:')
            time.sleep(1)
            for file in verified:
                print("  "+file)
                time.sleep(0.05)
            garbage=input('press enter to continue')
        print('\nFollowing files have been modified either by a user or a malicious party:')
        time.sleep(1)
        for file in modified:
            print("  "+file)
            time.sleep(0.05)
        input('press enter to continue')
        UserCheckModified(modified)

def main():
    ENILtester=os.listdir(dirName)
    ENILpresent=False
    for entry in ENILtester:
        if entry[-5:] == ".enil":
            ENILpresent=True
    if(ENILpresent!=True):
        print("ENIL store not found in current directory.")
        time.sleep(2)
        print("ENIL store is required to scan for changes")
        time.sleep(2)
        print("If ENIL store is present in a parent directory run this script from that directory")
        time.sleep(2)
        opt=input("Create ENIL store in current directory?(Y/n)")
        if(opt in yesAnswers):
            noENILfile()
            main()
        exit(0)            

    print("ENIL store found in current directory")
    while(True):
        print("\nWhat operation would you like to perform?(enter the corresponding number)")
        print("1. Scan for changes")
        print("2. Update ENIL store")
        print("3. Exit")
        opt=input("Selected option: ")
        print("")
        if(opt == "1"):
            hashesDictFromENIL,masterHashFromENIL= ENILfileFound()
            ModifyCheck(hashesDictFromENIL,masterHashFromENIL)
        elif(opt == "2"):
            ENILfileUpdate()
        elif(opt =="3"):
            return
        else:
            print(f"{opt} is not a valid option. Please try again")
main()